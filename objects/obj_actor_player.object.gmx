<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_human_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>class_player</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
event_inherited();
get_input()

//if (gamepad_is_connected(0)) and instance_number(obj_actor_player) {
//player = 1
//}

my_health = 100
my_health_max = 100
my_mana = 50
my_health_last = 100
level = 0

hurt_sound = snd_hurt2
death_sound = noone

max_hearts = 4*2
hearts_shake = 0

walk_speed = 16
z = 0

attacking = false
dir = 0

xaxis = 1
yaxis = 0
spd = 0

hud_show_timer = 60
fast_hud_alpha = 1

animation_priority = 0;
animation_index = 0;
animation_current = 'noone';

sprite_yplus = 0

sprite_idle = spr_human_stand
sprite_walk =spr_human_walk
//sprite_hit = spr_roug_stand
sprite_melee = spr_human_attack

cloth_sprite_idle = spr_roug_cloth_stand
cloth_sprite_walk = spr_roug_cloth_walk
//sprite_hit = spr_roug_stand
cloth_sprite_melee = spr_roug_cloth_attack

cloth_sprite_now = image_index
cloth_colour = c_red

phy_fixed_rotation = true


image_speed = 0

animation_play('idle',0.1,an_loop,1,3);

blood_color = c_red

arrows = 20
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory


//Main Weapon
wpn_name = "Test Sword"
wpn_sprite = spr_iron_shortsword
wpn_weapon_type = type_melee
//wpn_sprite = spr_wood_leapbow
//wpn_weapon_type = type_ranger

wpn_damage = 20
wpn_knockback = 4

xs = 0 //Check Melee Event
ys = 0 //Check Melee Event
xss = 1 //Check Animation Event
bow_draw = 0
bow_draw_tick = 0

can_attack = true

//Melee

wpn_reswing_speed = 0.05
wpn_swing_angle = 0
wpn_swing_delay = 13

wpn_range = 9

wpn_flame = false
wpn_stun = false
wpn_stab = false

wpn_damage_type = melee_sharp

//Ranger

//Bow
wpn_draw_speed = 0.055
wpn_power = 2.35

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Skills and Abilities

//Shift
shift_skill = "run"//"run" "dash" "jump"
running = false
dashing = false

stamina = 100
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_attack = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move
get_input()
var slowness = (bow_draw/2.6)*spd/2

xaxis = (right_key - left_key);
yaxis = (down_key - up_key);

if attacking = false and dashing = false {

    if shift_skill = "run" and (shift_skill_key) and stamina &gt; 15 and slowness == 0 {
        
        physics_apply_force(x ,y ,xaxis*spd*1.3 ,0 )
        physics_apply_force(x ,y ,0 ,yaxis*spd*1.3 )
        
        if point_distance(phy_position_x,phy_position_y,phy_position_xprevious,phy_position_yprevious) &gt; 0.25 {
            stamina -= 1
            running = true
        } else running = false
    } else {
        physics_apply_force(x ,y ,xaxis*abs(spd-slowness) ,0 )
        physics_apply_force(x ,y ,0 ,yaxis*abs(spd-slowness) )
        running = false
    }
}

if yaxis == 0 and xaxis == 0 {
spd = 0
}
else {
spd = walk_speed
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animations and other

// Here's code of Smooth Rotating
if xaxis != 0 {
xss = xaxis
}

if bow_draw &gt; 0.1 or alarm[0] &gt; 0 {
    if mouse_x &gt; x {
        image_xscale = lerp(image_xscale,1,0.25)
    }
    else {
        image_xscale = lerp(image_xscale,-1,0.25)
    }
} else {
    image_xscale = lerp(image_xscale,xss,0.25) //image_xscale = xaxis
}
//

switch (sprite_index) {

    case sprite_idle:
        {
        cloth_sprite_now = cloth_sprite_idle
        break; 
        }
    case sprite_walk:
        {
        cloth_sprite_now = cloth_sprite_walk
        break; 
        }
    case sprite_melee:
        {
        cloth_sprite_now = cloth_sprite_melee
        break; 
        }
}

if point_distance(phy_position_x,phy_position_y,phy_position_xprevious,phy_position_yprevious) &lt; 0.4 /*and xaxis != 0 and yaxis != 0*/ {
animation_play('idle',0.1,an_loop,1,3);
} else { 
animation_play('walk',0.2,an_loop,1,4);
}

if xaxis != 0 or yaxis != 0 {
xs = xaxis
ys = yaxis
}

if keys = "retro" {
dir = point_direction(0,0,xs,ys)
} else if keys = "standard" {
dir = point_direction(x,y,mouse_x,mouse_y)
}

depth = -y
animation_update_player();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fast Hud Visible
if hud_show_timer &gt; 0.5 hud_show_timer -= 0.5

if my_health_last != my_health {

hud_show_timer = 85

}
if hud_show_timer &gt; 0.5 {fast_hud_alpha = lerp(fast_hud_alpha,1,0.2)} else {fast_hud_alpha = lerp(fast_hud_alpha,0,0.2)}

if my_health_last &gt; my_health {
hearts_shake = 6
} else {
hearts_shake = lerp(hearts_shake,0,0.085)
}

my_health_last = my_health

if my_health &lt; my_health_max/3.5 {
hearts_shake = 1
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Y Plus Control
//This code is terrible. 
//Trust me ...
switch (sprite_index)
{
    case sprite_idle:
    sprite_yplus = image_index
    break;
    case sprite_walk:
    if image_index = 2 {
    sprite_yplus = 1
    } else {
    sprite_yplus = 0
    }
    break;
    case sprite_melee:
    sprite_yplus = image_index
    break;
}
 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Melee Attack
if wpn_weapon_type = type_melee {
var my_power


my_power = 1 - wpn_swing_angle/135


if (attack_key) and can_attack = true {
a = instance_create(x+lengthdir_x(wpn_range,dir),y+lengthdir_y(wpn_range,dir),obj_melee_wishp)
a.phy_rotation = - dir
a.owner = id
a.dir = dir
a.range = wpn_range
a.damage = wpn_damage*my_power
a.knockback = wpn_knockback*my_power

wpn_swing_angle = 135
can_attack = false
alarm[0] = wpn_swing_delay
animation_play('melee',0.25,an_clamp,2,3);
}

wpn_swing_angle = lerp(wpn_swing_angle,0,wpn_reswing_speed);

if sprite_index = sprite_melee {
attacking = true
} else {
attacking = false
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ranger Attack
if wpn_weapon_type = type_ranger {


if (attack_key_press) and arrows &gt; 0  {
    bow_draw = lerp(bow_draw,2.6,wpn_draw_speed)

    if round(bow_draw) = 1 and bow_draw_tick = 0 {audio_play_sound(snd_bow_draw1,1,false) bow_draw_tick = 1}
    if round(bow_draw) = 2 and bow_draw_tick = 1 {audio_play_sound(snd_bow_draw2,1,false) bow_draw_tick = 2}
    if round(bow_draw) = 3 and bow_draw_tick = 2 {audio_play_sound(snd_bow_draw3,1,false) bow_draw_tick = 3}

} else {
    bow_draw = lerp(bow_draw,0,0.55)
    bow_draw_tick = 0
}



if (attack_key_release) and arrows &gt; 0 and bow_draw &gt; 0.6 {
    
    arrows -= 1
    
    a = instance_create(x+lengthdir_x(4,dir),y+lengthdir_y(4,dir),obj_arrow);
    a.damage = wpn_damage*(bow_draw)
    with a {
    physics_apply_impulse(x ,y ,lengthdir_x(other.wpn_power*other.bow_draw/2.6,other.dir+random_range(2,-2)) ,lengthdir_y(other.wpn_power*other.bow_draw/2.6,other.dir+random_range(2,-2)) )
    }
    
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TEST DEATH
if my_health &lt; 0.1 {
instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Skills
if running = false and dashing = false and point_distance(phy_position_x,phy_position_y,phy_position_xprevious,phy_position_yprevious) &lt; 0.25 {
    if stamina &lt; 40 {
        stamina = lerp(stamina,100,0.005)
    } else {
        stamina = lerp(stamina,100,0.035)
    }
}

if shift_skill_key {

     
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="class_collision">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collison</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="class_player">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collison</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="class_bad">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collison</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Things
if optymiz(x,y) = 0 exit;



draw_sprite_ext(spr_actor_shadow,image_index,x-(0.5*image_xscale),y+1,abs(image_xscale),image_yscale,image_angle,c_white,image_alpha)
//draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
draw_self();
draw_sprite_ext(cloth_sprite_now,image_index,x,y,image_xscale,image_yscale,image_angle,cloth_colour,image_alpha)

///Draw Fast Hud
/*if hud_show_timer &lt; 0.6 exit;

hearts = round(my_health/my_health_max*max_hearts)

for (h=0; h&lt;max_hearts/2; h+=1)
{
    if hearts = 0 {
        subimg = 2
    } else
    if hearts = 1 {
        subimg = 1
        hearts -= 1
    } else {
        subimg = 0
        hearts -= 2
    }
    draw_sprite_ext(spr_heart_HUD,subimg,x-(max_hearts/2*3)+(8*h),y-10,1,1,0,c_white,1)
};
*/

//Draw Weapon
switch (wpn_weapon_type)
{
    case type_melee: 
    draw_sprite_ext(wpn_sprite,0,x+4*image_xscale,y+1+floor(sprite_yplus),image_xscale,image_yscale,-wpn_swing_angle*image_xscale+45*image_xscale,c_white,1);
    break;
    case type_ranger: 
    draw_sprite_ext(wpn_sprite,round(bow_draw),x+4*image_xscale,y+floor(sprite_yplus),image_xscale,image_yscale,-45*image_xscale,c_white,1);
    if (attack_key_press) and arrows &gt; 0 draw_sprite_ext(spr_bow_arrow,round(bow_draw),x+4*image_xscale,y+floor(sprite_yplus),image_xscale,image_yscale,-45*image_xscale,c_white,1);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>1.29999995231628</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>8</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,6</point>
    <point>8,6</point>
    <point>8,8</point>
    <point>0,8</point>
  </PhysicsShapePoints>
</object>
